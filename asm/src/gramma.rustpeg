#[pub]
programm -> super::Prog
	= s:(Statement / WhiteSpace { None } )* { super::Prog::new(s) }

Statement -> Option<super::Statement>
	= l:Label { Some(super::Statement::Label(l)) }
	/ i:Instruction { Some(i) }
	/ d:Data { Some(super::Statement::Data(d)) }
	/ Comment { None }
	


Label -> String
	= i:Ident ":" { i }


Instruction -> super::Statement
	= i:Ident (" " / "\t")* arg:Argument ** Seperator { super::Statement::Instruction(i, arg) }
	/ i:Ident { super::Statement::Instruction(i, Vec::new()) }

Data -> String
	= "'" n:Number "'" { n }


Comment -> ()
	= "//" [^\n]*


Argument -> super::Argument
	= i:Ident { super::Argument::Ident(i) }
	/ n:Number { super::Argument::Number(n) }


Number -> String
	=  "0x"[0-9a-fA-F]+ { match_str.to_string() }
	/ [0-9]+ { match_str.to_string() }


Ident -> String
	= [a-zA-Z_][a-zA-Z_0-9]* { match_str.to_string() }


WhiteSpace -> ()
	= " " 
	/ "\t" 
	/ "\n"
	
	
Seperator -> ()
	= WhiteSpace* "," WhiteSpace*
